# Colors
RED="\\033[1;31m"
GREEN="\\033[1;32m"
YELLOW="\\033[1;33m"
BLUE="\\033[1;34m"
MAGENTA="\\033[1;35m"
CYAN="\\033[1;36m"
GRAS="\033[1m"
END="\\033[1;00m"
FATAL="\\033[1;37;41m" # Blanc sur fond rouge vif

# System
alias ll='ls -lhF'
alias la='ls -A'
alias l='ls -CF'
alias c='clear'
alias ip='ip -c'
psg() { ps -ef | grep "$@" }

# Packages
alias get='sudo dnf install'
alias search='dnf search'

# Git
alias gst='git status'
alias gpr='git pull --rebase'
alias grrh='git reset --hard HEAD'
alias gcdf='git clean -df'
alias gl='git lg | head -12'

# vagrant
alias v=vagrant
alias vup='vagrant up'
alias vssh='vagrant ssh'
alias vzz='vagrant status'

# docker
alias dm='docker-machine'
alias dc='docker-compose'
dip() {
	[[ -z $1 ]] && echo "I need an argument" && return 1
	if which jq &>/dev/null; then
		docker inspect $1 | jq -r '.[].NetworkSettings.IPAddress'
	else
		docker inspect $1 | sed -e '/"IPAddress":/!d' -e 's/["|:|,]//g' -e "s/^[ ]*//g" -e "s/IPAddress //g"
	fi
}
dps() {
	local awkFormat="%-25s %-25s %-25s"
	local containerCount=0

	docker ps $1 --format="{{.ID}}|{{.Image}}|{{.CreatedAt}}|{{.RunningFor}}|{{.Status}}|{{.Size}}|{{.Names}}|{{.Ports}}" \
	| while IFS='|' read id image createdAt runningFor containerStatus size names ports
	do
		containerCount=$((containerCount + 1))
		local statusColor=${RED}
		[[ $containerStatus =~ ^Up ]] && statusColor=${GREEN} 

		echo -en " ${statusColor}$id${END}"
		[[ -n $names ]] && echo -en "${GRAS} →  $names${END}"
		echo

		echo -e "   ${GRAS}Image:${END} $image"
		echo -e "   ${GRAS}Creation:${END} $createdAt"
		echo -e "   ${GRAS}Status:${END} ${statusColor}$containerStatus${END}"
		echo -e "   ${GRAS}Size:${END} $size"
		if [[ -n $ports ]];  then
			echo -e "   ${GRAS}Ports:${END} $ports"
		fi
		echo

	done

	echo " $containerCount containers."
}

# Containers
alias gw="docker start synogw"
alias rainbowstream="docker run -it --rm \
	--net=container:synogw \
	-v /etc/localtime:/etc/localtime:ro \
	-v $HOME/.rainbow_oauth:/root/.rainbow_oauth \
	-v $HOME/.rainbow_config.json:/root/.rainbow_config.json \
	--name rainbowstream \
	jess/rainbowstream --proxy-host localhost --proxy-port 3128 --proxy-type HTTP"

# Gerrit
gerritify ()
{
    local user=$USERNAME
    [[ -n $1 ]] && user=$1
    echo "Gerrit username: $user"
    submodulesStatus=`git submodule status`;
    if [ ${#submodulesStatus} -eq 0 ]; then
        repo=$(basename `git rev-parse --show-toplevel`);
        newUrl=ssh://`echo $user|tr '[A-Z]' '[a-z]'`@git:29418/${repo}.git;
        git remote set-url origin ${newUrl};
        scp -p -P 29418 `echo $user|tr '[A-Z]' '[a-z]'`@git:hooks/commit-msg .git/hooks/;
        echo "OK! Ce repo a ete Gerritifié !!";
    else
        git submodule foreach 'git remote set-url origin ssh://`echo $user|tr [A-Z] [a-z]`@git:29418/${name}.git';
        git submodule foreach 'scp -p -P 29418 `echo $user|tr [A-Z] [a-z]`@git:hooks/commit-msg ../.git/modules/$name/hooks';
        echo "OK! Les submodules de ce repo ont été Gerritifié !!";
    fi
}
ungerritify ()
{
    submodulesStatus=`git submodule status`;
    if [ ${#submodulesStatus} -eq 0 ]; then
        repo=$(basename `git rev-parse --show-toplevel`);
        if [[ "${repo}" == *piaf* ]]; then
            newUrl=git@git:/gitrepos/piaf/${repo}.git;
        else
            newUrl=git@git:/gitrepos/${repo}.git;
        fi;
        git remote set-url origin ${newUrl};
        echo "OK! Ce repo a ete UNGerritifié !!";
    fi
}

