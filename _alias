# Colors
RED="\\033[1;31m"
GREEN="\\033[1;32m"
YELLOW="\\033[1;33m"
BLUE="\\033[1;34m"
MAGENTA="\\033[1;35m"
CYAN="\\033[1;36m"
GRAS="\033[1m"
END="\\033[1;00m"
FATAL="\\033[1;37;41m" # Blanc sur fond rouge vif

# System
alias ll='ls -lhF'
alias la='ls -A'
alias l='ls -CF'
alias c='clear'
alias ip='ip -c'
psg() { ps -ef | grep "$@" }

# Packages
alias get='sudo dnf install'
alias search='dnf search'

# Volume

v() {
	local firstChar=${1:0:1}
	local volume="+0%"

	case $firstChar in
		-|+) volume="${firstChar}$(( ${#1} * 5))%";;
		[0-9]) volume="${1}%";;
		*) cat <<-EOF
			Usage: v <+*|-*|value>

			Increase, decrease or set volume to a given value.
			Exemples:
			    - v +         Increase volume by 5%
			    - v ++++      Increase volume by 20%
			    - v --        Decrease volume by 10%
			    - v 0         Mute sound
			    - v 50        Set volume to 50%

EOF
	esac

	# Specific to pulse, would need another command for alsamixer (or whatever else)
	pactl set-sink-volume @DEFAULT_SINK@ "${volume}"
	echo "Volume: $(pactl list sinks | grep '^[[:space:]]Volume:' | cut -d'/' -f2 | tr -d ' ')"

	# Notifying i3blocks
	pidof i3blocks &>/dev/null && pkill -RTMIN+10 i3blocks
}

alias mute='pactl set-sink-mute @DEFAULT_SINK@ toggle'
alias v+='v +'
alias v++='v ++'
alias v+++='v +++'
alias v-='v -'
alias v--='v --'
alias v---='v ---'

# Git
alias gst='git status'
alias gpr='git pull --rebase'
alias grrh='git reset --hard HEAD'
alias gcdf='git clean -df'
alias gl='git lg | head -12'

# vagrant
alias vup='vagrant up'
alias vssh='vagrant ssh'
alias vzz='vagrant status'

# docker
alias dm='docker-machine'
alias dc='docker-compose'
dclean() {
	echo "Cleaning exited containers:"
	docker rm $(docker ps -qa --filter="status=exited" | xargs)

	echo
	echo "Cleaning untagged images"
	docker rmi $(docker images | grep "<none>" | awk '{print $3}' | xargs)
	echo
}

dip() {
	[[ -z $1 ]] && echo "I need an argument" && return 1
	if which jq &>/dev/null; then
		docker inspect $1 | jq -r '.[].NetworkSettings.IPAddress'
	else
		docker inspect $1 | sed -e '/"IPAddress":/!d' -e 's/["|:|,]//g' -e "s/^[ ]*//g" -e "s/IPAddress //g"
	fi
}
dps() {
	local awkFormat="%-25s %-25s %-25s"
	local containerCount=0

	docker ps $1 --format="{{.ID}}|{{.Image}}|{{.CreatedAt}}|{{.RunningFor}}|{{.Status}}|{{.Size}}|{{.Names}}|{{.Ports}}" \
	| while IFS='|' read id image createdAt runningFor containerStatus size names ports
	do
		containerCount=$((containerCount + 1))
		local statusColor=${RED}
		[[ $containerStatus =~ ^Up ]] && statusColor=${GREEN} 

		echo -en " ${statusColor}$id${END}"
		[[ -n $names ]] && echo -en "${GRAS} →  $names${END}"
		echo

		echo -e "   ${GRAS}Image:${END} $image"
		echo -e "   ${GRAS}Creation:${END} $createdAt"
		echo -e "   ${GRAS}Status:${END} ${statusColor}$containerStatus${END}"
		echo -e "   ${GRAS}Size:${END} $size"
		if [[ -n $ports ]];  then
			echo -e "   ${GRAS}Ports:${END} $(echo $ports | sed 's/0.0.0.0://g')"
		fi
		echo

	done

	echo " $containerCount containers."
}

# Function allowing easy ssh'ing into containers exposing their port 22 (i know, ssh containers are evil)
dssh() {
	local sshPort=$(docker ps --format="{{.Ports}}" --filter="name=$1" 2>/dev/null | sed -r -e 's|.*:([0-9]*)->22/.*|\1|')
	local username=$2

	[[ -z $username ]] && echo "Please specify username: dssh <container> <username>" && return 1
	[[ -z $sshPort ]] && echo "Could not determine which port to use for ssh connection" && return 1

	ssh localhost -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $sshPort -l $username

}

# Containers
alias synogw="(docker stop homegw; docker run -d --restart=always --name synogw -e "SSHGW=syno" -p 32017:3128 -p 43022:43022 -p 15901:5901 local/sshgw || docker start synogw) &>/dev/null; dps -l name=synogw"
alias homegw="(docker stop synogw; docker run -d --restart=always --name homegw -e "SSHGW=home" -p 32017:3128 -p 43022:43022 -p 15901:5901 local/sshgw || docker start synogw) &>/dev/null; dps -l name=synogw"
alias proxy="(docker run -d --restart=always --name proxy-mipih -p 33128:3128 local/proxy-mipih || docker start proxy-mipih) &>/dev/null; dps -l name=proxy-mipih"
alias rainbowstream="docker run -it --rm \
	--net=container:synogw \
	-v /etc/localtime:/etc/localtime:ro \
	-v $HOME/.rainbow_oauth:/root/.rainbow_oauth \
	-v $HOME/.rainbow_config.json:/root/.rainbow_config.json \
	--name rainbowstream \
	jess/rainbowstream --proxy-host localhost --proxy-port 3128 --proxy-type HTTP"
alias viz="(docker run -d --name viz -v /var/run/docker.sock:/var/run/docker.sock -e PORT=3000 -p 3000:3000 centurylink/image-graph || docker start viz) &>/dev/null && google-chrome-stable http://localhost:3000"

# vpn
alias synovpn="sudo openvpn --config ~/.ovpn/openvpn.ovpn --daemon"

# Gerrit
gerritify ()
{
    local user=$USERNAME
    [[ -n $1 ]] && user=$1
    echo "Gerrit username: $user"
    submodulesStatus=`git submodule status`;
    if [ ${#submodulesStatus} -eq 0 ]; then
        repo=$(basename `git rev-parse --show-toplevel`);
        newUrl=ssh://`echo $user|tr '[A-Z]' '[a-z]'`@git:29418/${repo}.git;
        git remote set-url origin ${newUrl};
        scp -p -P 29418 `echo $user|tr '[A-Z]' '[a-z]'`@git:hooks/commit-msg .git/hooks/;
        echo "OK! Ce repo a ete Gerritifié !!";
    else
        git submodule foreach 'git remote set-url origin ssh://`echo $user|tr [A-Z] [a-z]`@git:29418/${name}.git';
        git submodule foreach 'scp -p -P 29418 `echo $user|tr [A-Z] [a-z]`@git:hooks/commit-msg ../.git/modules/$name/hooks';
        echo "OK! Les submodules de ce repo ont été Gerritifié !!";
    fi
}
ungerritify ()
{
    submodulesStatus=`git submodule status`;
    if [ ${#submodulesStatus} -eq 0 ]; then
        repo=$(basename `git rev-parse --show-toplevel`);
        if [[ "${repo}" == *piaf* ]]; then
            newUrl=git@git:/gitrepos/piaf/${repo}.git;
        else
            newUrl=git@git:/gitrepos/${repo}.git;
        fi;
        git remote set-url origin ${newUrl};
        echo "OK! Ce repo a ete UNGerritifié !!";
    fi
}

alias ww="cd /home/adrien/sandbox/work"
alias pp="cd /home/adrien/sandbox/stuff"
